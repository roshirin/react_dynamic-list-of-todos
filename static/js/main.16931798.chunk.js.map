{"version":3,"sources":["types/FilterType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["FilterType","TodoItem","todo","selectedTodo","onTodoSelection","id","title","completed","isSelectedTodo","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","onFilterChange","query","onQueryChange","onQueryReset","onChange","value","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","TodoModal","selectedUser","onReset","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","filterType","setFilterType","setQuery","setSelectedTodo","selectedTodoUser","setSelectedTodoUser","preparedTodos","useMemo","filteredTodos","filter","trim","length","toLowerCase","includes","handleTodosPrepare","useEffect","todosData","userId","getUser","userData","event","target","todoId","newSelectedTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16931798.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onTodoSelection: (todoId: number) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onTodoSelection,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const isSelectedTodo = selectedTodo ? id === selectedTodo.id : false;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames(\n        { 'has-background-info-light': isSelectedTodo },\n      )}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames(\n            { 'has-text-danger': !completed },\n            { 'has-text-success': completed },\n          )}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onTodoSelection(id)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames(\n                { 'far fa-eye': !isSelectedTodo },\n                { 'far fa-eye-slash': isSelectedTodo },\n              )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onTodoSelection: (todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onTodoSelection,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onTodoSelection={onTodoSelection}\n          key={todo.id}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { ChangeEvent } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  onFilterChange: (event: ChangeEvent<HTMLSelectElement>) => void;\n  query: string;\n  onQueryChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onQueryReset: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onFilterChange,\n  query,\n  onQueryChange,\n  onQueryReset,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={onFilterChange}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={onQueryChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onQueryReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedUser: User | null;\n  onReset: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  selectedUser,\n  onReset,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onReset}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={classNames(\n                    { 'has-text-danger': !completed },\n                    { 'has-text-success': completed },\n                  )}\n                >\n                  {completed\n                    ? 'Done'\n                    : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={selectedUser && selectedUser.email}>\n                  {selectedUser\n                    ? selectedUser.name\n                    : 'Unknown user'}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  useState,\n  useEffect,\n  useMemo,\n  ChangeEvent,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\nimport { User } from './types/User';\n\nconst handleTodosPrepare = (\n  todos: Todo[],\n  filterType: string,\n  query: string,\n) => {\n  const filteredTodos = todos.filter(todo => {\n    switch (filterType) {\n      case FilterType.ACTIVE:\n        return !todo.completed;\n\n      case FilterType.COMPLETED:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  if (query.trim().length > 0) {\n    const queriedTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase().trim())\n    ));\n\n    return queriedTodos;\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterType, setFilterType] = useState('all');\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedTodoUser, setSelectedTodoUser] = useState<User | null>(null);\n\n  const preparedTodos = useMemo(() => (\n    handleTodosPrepare(todos, filterType, query)\n  ), [todos, filterType, query]);\n\n  useEffect(() => {\n    getTodos().then(todosData => setTodos(todosData));\n  }, []);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      const { userId } = selectedTodo;\n\n      getUser(userId).then(userData => setSelectedTodoUser(userData));\n    }\n  }, [selectedTodo]);\n\n  const handleFilterSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilterType(event.target.value);\n  };\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleQueryReset = () => {\n    setQuery('');\n  };\n\n  const handleTodoSelect = (todoId: number) => {\n    const newSelectedTodo = todos.find(todo => todo.id === todoId) || null;\n\n    setSelectedTodo(newSelectedTodo);\n  };\n\n  const handleTodoReset = () => {\n    setSelectedTodo(null);\n    setSelectedTodoUser(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterSelect}\n                query={query}\n                onQueryChange={handleQueryChange}\n                onQueryReset={handleQueryReset}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={preparedTodos}\n                    selectedTodo={selectedTodo}\n                    onTodoSelection={handleTodoSelect}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          selectedUser={selectedTodoUser}\n          onReset={handleTodoReset}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}