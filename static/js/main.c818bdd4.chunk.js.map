{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","types/FilterType.ts","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","onTodoSelection","className","map","todo","id","title","completed","isSelectedTodo","classNames","type","onClick","TodoFilter","onFilterChange","query","onQueryChange","onQueryReset","onChange","value","placeholder","style","pointerEvents","Loader","TodoModal","selectedTodoUser","onTodoReset","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","userId","App","useState","setTodos","filterType","setFilterType","setQuery","setSelectedTodo","setSelectedTodoUser","preparedTodos","filteredTodos","filter","ACTIVE","COMPLETED","trim","length","toLowerCase","includes","handleTodosPrepare","useEffect","fetchData","a","todoList","user","event","target","todoId","newSelectedTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c818bdd4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onTodoSelection: (todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onTodoSelection,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        const isSelectedTodo = selectedTodo ? id === selectedTodo.id : false;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': isSelectedTodo },\n            )}\n          >\n            <td className=\"is-vcentered\">\n              {id}\n            </td>\n\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(\n                  { 'has-text-danger': !completed },\n                  { 'has-text-success': completed },\n                )}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelection(id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      { 'far fa-eye': !isSelectedTodo },\n                      { 'far fa-eye-slash': isSelectedTodo },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { ChangeEvent } from 'react';\n\ntype Props = {\n  onFilterChange: (event: ChangeEvent<HTMLSelectElement>) => void;\n  query: string;\n  onQueryChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onQueryReset: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onFilterChange,\n  query,\n  onQueryChange,\n  onQueryReset,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={onFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={onQueryChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onQueryReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodoUser: User | null;\n  onTodoReset: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  selectedTodoUser,\n  onTodoReset,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedTodoUser\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => onTodoReset()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={classNames(\n                    { 'has-text-danger': !completed },\n                    { 'has-text-success': completed },\n                  )}\n                >\n                  {completed\n                    ? 'Done'\n                    : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={selectedTodoUser && selectedTodoUser.email}>\n                  {selectedTodoUser\n                    ? selectedTodoUser.name\n                    : 'Unknown user'}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\nimport { User } from './types/User';\n\nconst handleTodosPrepare = (\n  todos: Todo[],\n  filterType: string,\n  query: string,\n) => {\n  const filteredTodos = todos.filter(todo => {\n    switch (filterType) {\n      case FilterType.ACTIVE:\n        return !todo.completed;\n\n      case FilterType.COMPLETED:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  if (query.trim().length > 0) {\n    const queriedTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase().trim())\n    ));\n\n    return queriedTodos;\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterType, setFilterType] = useState('all');\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedTodoUser, setSelectedTodoUser] = useState<User | null>(null);\n\n  const preparedTodos = handleTodosPrepare(todos, filterType, query);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const todoList = await getTodos();\n\n      setTodos(todoList);\n    };\n\n    fetchData();\n  }, [preparedTodos]);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      const { userId } = selectedTodo;\n\n      const fetchData = async () => {\n        const user = await getUser(userId);\n\n        setSelectedTodoUser(user);\n      };\n\n      fetchData();\n    }\n  }, [selectedTodo]);\n\n  const handleFilterSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilterType(event.target.value);\n  };\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleQueryReset = () => {\n    setQuery('');\n  };\n\n  const handleTodoSelect = (todoId: number) => {\n    const newSelectedTodo = todos.find(todo => todo.id === todoId) || null;\n\n    setSelectedTodo(newSelectedTodo);\n  };\n\n  const handleTodoReset = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterSelect}\n                query={query}\n                onQueryChange={handleQueryChange}\n                onQueryReset={handleQueryReset}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={preparedTodos}\n                    selectedTodo={selectedTodo}\n                    onTodoSelection={handleTodoSelect}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            todo={selectedTodo}\n            selectedTodoUser={selectedTodoUser}\n            onTodoReset={handleTodoReset}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}